const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const { AptosClient } = require('aptos'); // Assuming you're using the Aptos SDK for JavaScript
const axios = require('axios'); // Add axios to make HTTP requests

// Paths to the relevant files
const moveTomlPath = path.join(__dirname, '../Move.toml');
const configYamlPath = path.join(__dirname, '../.aptos/config.yaml');
const deployedModulesPath = path.join(__dirname, '../../../packages/nextjs/contracts/deployedModules.ts');
const externalModulesPath = path.join(__dirname, '../../../packages/nextjs/contracts/externalModules.ts');

// Function to parse the TOML file and extract addresses
function parseToml(filePath) {
  const toml = fs.readFileSync(filePath, 'utf-8');
  const addressesSection = toml.match(/\[addresses\]([\s\S]*?)(?=\[|$)/);
  if (addressesSection) {
    const addresses = {};
    const lines = addressesSection[1].trim().split('\n');
    lines.forEach(line => {
      const [key, value] = line.split('=').map(part => part.trim().replace(/['"]+/g, ''));
      addresses[key] = value.replace(/^0x/, ''); // Strip 0x from the address
    });
    return addresses;
  }
  return null;
}

// Function to parse the YAML config file
function parseYaml(filePath) {
  const yamlContent = fs.readFileSync(filePath, 'utf-8');
  return yaml.load(yamlContent);
}

// Function to fetch account modules
async function getAccountModules(requestParameters, nodeUrl) {
  const client = new AptosClient(nodeUrl);
  const { address, ledgerVersion } = requestParameters;
  let ledgerVersionBig;
  if (ledgerVersion !== undefined) {
    ledgerVersionBig = BigInt(ledgerVersion);
  }
  return client.getAccountModules(address, { ledgerVersion: ledgerVersionBig });
}

// Function to fetch chainId from the REST API
async function fetchChainId(nodeUrl) {
  let url;
  if (nodeUrl.includes("movement")) {
    url = nodeUrl; // Use nodeUrl directly without appending '/v1'
  } else {
    url = `${nodeUrl}/v1`; // Default behavior, append '/v1'
  }
  const response = await axios.get(url);
  return response.data.chain_id;
}

// Function to get existing contracts data
function getExistingContractsData(filePath) {
  if (fs.existsSync(filePath)) {
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const match = fileContent.match(/deployedContracts\s*=\s*({[\s\S]*});/);
    console.log('Match:', fileContent);
    if (match && match[1]) {
      return JSON.parse(match[1]);
    }
  }
  return {};
}

// Function to write modules to TypeScript file, preserving other chain data
function writeModules(filePath, modules, chainId) {
  let existingContracts = getExistingContractsData(filePath);
  console.log('Existing contracts data:', existingContracts);

  const chainIdString = chainId.toString();
  // Update or add the chain data
  existingContracts[chainIdString] = modules.reduce((acc, module) => {
    acc[module.abi.name] = {
      bytecode: module.bytecode,
      abi: module.abi
    };
    return acc;
  }, {});

  // Generate file content
  const fileContent = `
  /**
   * This file is autogenerated.
   * You should not edit it manually or your changes might be overwritten.
   */
  import { GenericContractsDeclaration } from "~~/utils/scaffold-move/contract";

  const deployedContracts = ${JSON.stringify(existingContracts, null, 2)} as const;

  export default deployedContracts satisfies GenericContractsDeclaration;
  `;

  fs.writeFileSync(filePath, fileContent.trim(), 'utf-8');

}

// Main function to perform the tasks
async function main() {
  const config = parseYaml(configYamlPath);
  const nodeUrl = config.profiles.default.rest_url;
  const accountAddress = config.profiles.default.account.replace(/^0x/, ''); // Strip 0x from the account address

  const addresses = parseToml(moveTomlPath);

  // Fetch the chainId from the REST API
  const chainId = await fetchChainId(nodeUrl);
  console.log(`Chain ID: ${chainId}`);

  // Ensure the output directory exists
  const outputDirectory = path.dirname(deployedModulesPath);
  if (!fs.existsSync(outputDirectory)) {
    fs.mkdirSync(outputDirectory, { recursive: true });
  }

  // Fetch and save account modules for the account from config.yaml
  const deployedModules = await getAccountModules({ address: accountAddress }, nodeUrl);
  writeModules(deployedModulesPath, deployedModules, chainId);
  console.log(`Data for deployed modules at address ${accountAddress} saved successfully.`);

  // Fetch and save account modules for each address from Move.toml, excluding the one from config.yaml
  if (addresses) {
    const externalModules = [];
    for (const [name, address] of Object.entries(addresses)) {
      if (address.toLowerCase() !== accountAddress.toLowerCase()) {
        const modules = await getAccountModules({ address }, nodeUrl);
        externalModules.push(...modules);
        console.log(`Data for address ${address} saved successfully.`);
      }
    }
    writeModules(externalModulesPath, externalModules, chainId);
  } else {
    console.log('No addresses found in Move.toml.');
  }
}

main().catch(console.error);
